// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  properties Property[]
  messages   Message[]
  accounts   Account[]
  sessions   Session[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relacionamentos
  properties Property[]
  
  @@map("categories")
}

model Property {
  id                String        @id @default(cuid())
  title             String
  description       String
  address           String
  city              String
  state             String
  zipCode           String        @map("zip_code")
  bedrooms          Int
  bathrooms         Int
  area              Float
  lotSize           Float?        @map("lot_size")
  
  // Valores
  purchasePrice     Float?        @map("purchase_price")
  salePrice         Float?        @map("sale_price")
  rentPrice         Float?        @map("rent_price")
  
  // Status
  status            PropertyStatus @default(AVAILABLE)
  propertyType      PropertyType   @map("property_type")
  
  // Relacionamentos
  categoryId        String         @map("category_id")
  category          Category       @relation(fields: [categoryId], references: [id])
  
  ownerId           String         @map("owner_id")
  owner             User           @relation(fields: [ownerId], references: [id])
  
  images            PropertyImage[]
  messages          Message[]
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  fileName   String   @map("file_name")
  fileSize   Int      @map("file_size")
  mimeType   String   @map("mime_type")
  isMain     Boolean  @default(false) @map("is_main")
  
  // Relacionamentos
  propertyId String   @map("property_id")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("property_images")
}

model Message {
  id         String      @id @default(cuid())
  name       String
  email      String
  phone      String?
  message    String
  status     MessageStatus @default(PENDING)
  
  // Relacionamentos
  propertyId String      @map("property_id")
  property   Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  userId     String?     @map("user_id")
  user       User?       @relation(fields: [userId], references: [id])
  
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  
  @@map("messages")
}

enum Role {
  USER
  ADMIN
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  PENDING
}

enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  LAND
  STUDIO
}

enum MessageStatus {
  PENDING
  READ
  REPLIED
}
